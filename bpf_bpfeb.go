// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfBufsT struct{ Buf [32768]int8 }

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *bpfObjects
//     *bpfPrograms
//     *bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	InodeCreate *ebpf.ProgramSpec `ebpf:"inode_create"`
	InodeLink   *ebpf.ProgramSpec `ebpf:"inode_link"`
	InodeUnlink *ebpf.ProgramSpec `ebpf:"inode_unlink"`
	PathLink    *ebpf.ProgramSpec `ebpf:"path_link"`
	PathMknod   *ebpf.ProgramSpec `ebpf:"path_mknod"`
	PathUnlink  *ebpf.ProgramSpec `ebpf:"path_unlink"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	Bufs    *ebpf.MapSpec `ebpf:"bufs"`
	BufsOff *ebpf.MapSpec `ebpf:"bufs_off"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	Bufs    *ebpf.Map `ebpf:"bufs"`
	BufsOff *ebpf.Map `ebpf:"bufs_off"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.Bufs,
		m.BufsOff,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	InodeCreate *ebpf.Program `ebpf:"inode_create"`
	InodeLink   *ebpf.Program `ebpf:"inode_link"`
	InodeUnlink *ebpf.Program `ebpf:"inode_unlink"`
	PathLink    *ebpf.Program `ebpf:"path_link"`
	PathMknod   *ebpf.Program `ebpf:"path_mknod"`
	PathUnlink  *ebpf.Program `ebpf:"path_unlink"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.InodeCreate,
		p.InodeLink,
		p.InodeUnlink,
		p.PathLink,
		p.PathMknod,
		p.PathUnlink,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed bpf_bpfeb.o
var _BpfBytes []byte
